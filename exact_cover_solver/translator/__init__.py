"""Translator for decoding solutions to understandable output format."""
import math

from exact_cover_solver.types import Solution, SubsetCollection, Subset
from typing import List

PentominoBoard = List[List[str]]
SudokuBoard = List[List[int]]


class Translator:
    """Translator for decoding solutions to understandable output format."""

    @staticmethod
    def to_pentomino_boards(
        solutions: List[Solution],
        board_height: int,
        board_width: int,
        subset_collection: SubsetCollection,
    ) -> List[PentominoBoard]:
        """Convert list of solutions to pentomino boards.

        Args:
            solutions: Solutions generated by algorithm X
            board_height: Pentomino board height
            board_width: Pentomino board width
            subset_collection: Original pentomino placement possibilities

        Returns:
             List of pentomino boards with pentominos placed to correct places.
        """
        boards: List[PentominoBoard] = []
        for solution in solutions:
            board: PentominoBoard = [[""] * board_width for _ in range(board_height)]
            for subset_id in solution:
                pentomino_name, *points = subset_collection[subset_id]
                for x, y in points:
                    board[y][x] = pentomino_name
            boards.append(board)
        return boards

    @staticmethod
    def to_sudoku_boards(solutions: List[Solution]) -> List[SudokuBoard]:
        """Convert list of solutions to sudoku boards.

        Args:
            solutions: Solutions generated by algorithm X

        Returns:
             List of sudoku boards correct solution.
        """
        boards: List[SudokuBoard] = []
        for solution in solutions:
            size = int(math.sqrt(len(solution)))
            board: SudokuBoard = [[0] * size for _ in range(size)]
            for subset_id in solution:
                y, x, value = subset_id
                board[y][x] = value
            boards.append(board)
        return boards

    @staticmethod
    def to_generic_solutions(
        solutions: List[Solution],
        subset_collection: SubsetCollection,
    ) -> List[List[Subset]]:
        """Extend list of solutions to have subsets instead of subset ids.

        Args:
            solutions: Solutions generated by algorithm X
            subset_collection: Original pentomino placement possibilities

        Returns:
            List of lists where each list has the subsets picked to solution.
        """
        return [
            [subset_collection[subset_id] for subset_id in solution]
            for solution in solutions
        ]
